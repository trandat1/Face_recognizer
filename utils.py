from pathlib import Path
import os
import cv2
import smtplib
from datetime import datetime, timedelta
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders


class SecurityUtils:
    # Load config t·ª´ .env ho·∫∑c bi·∫øn m√¥i tr∆∞·ªùng
    ALERT_SENDER = os.getenv("ALERT_SENDER", "your_email@gmail.com")
    ALERT_PASSWORD = os.getenv("ALERT_PASSWORD", "")  # App password n·∫øu Gmail
    ALERT_RECEIVER = os.getenv("ALERT_RECEIVER", ALERT_SENDER)
    ALERT_COOLDOWN_SECS = int(os.getenv("ALERT_COOLDOWN_SECS", "300"))  # 5 ph√∫t m·∫∑c ƒë·ªãnh
    LAST_EMAIL_MARKER = Path("logs/last_email.txt")

    @classmethod
    def _can_send_email_now(cls) -> bool:
        """Ki·ªÉm tra c√≥ th·ªÉ g·ª≠i email hay ch∆∞a (t√¥n tr·ªçng cooldown)."""
        if not cls.ALERT_PASSWORD or not cls.ALERT_SENDER:
            return False
        if not cls.LAST_EMAIL_MARKER.exists():
            return True
        try:
            ts = cls.LAST_EMAIL_MARKER.read_text().strip()
            last_time = datetime.fromisoformat(ts)
        except Exception:
            return True
        return datetime.now() - last_time >= timedelta(seconds=cls.ALERT_COOLDOWN_SECS)

    @classmethod
    def _touch_email_marker(cls) -> None:
        """ƒê√°nh d·∫•u th·ªùi gian g·ª≠i email g·∫ßn nh·∫•t."""
        cls.LAST_EMAIL_MARKER.parent.mkdir(exist_ok=True)
        cls.LAST_EMAIL_MARKER.write_text(datetime.now().isoformat())

    @classmethod
    def send_alert_email(cls, image_path: str, receiver: str | None = None) -> None:
        """G·ª≠i email c·∫£nh b√°o k√®m ·∫£nh Unknown."""
        if not cls._can_send_email_now():
            print("[Email] ƒêang trong th·ªùi gian cooldown, b·ªè qua g·ª≠i email.")
            return

        sender = cls.ALERT_SENDER
        password = cls.ALERT_PASSWORD
        to_addr = receiver or cls.ALERT_RECEIVER

        try:
            msg = MIMEMultipart()
            msg["From"] = sender
            msg["To"] = to_addr
            msg["Subject"] = "‚ö†Ô∏è C·∫£nh b√°o an ninh: Ph√°t hi·ªán khu√¥n m·∫∑t l·∫°"
            body = "H·ªá th·ªëng ph√°t hi·ªán khu√¥n m·∫∑t ch∆∞a ƒë∆∞·ª£c nh·∫≠n di·ªán. Vui l√≤ng ki·ªÉm tra ·∫£nh ƒë√≠nh k√®m."
            msg.attach(MIMEText(body, "plain"))

            with open(image_path, "rb") as f:
                part = MIMEBase("application", "octet-stream")
                part.set_payload(f.read())
            encoders.encode_base64(part)
            part.add_header("Content-Disposition", f"attachment; filename={Path(image_path).name}")
            msg.attach(part)

            with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
                server.login(sender, password)
                server.send_message(msg)

            cls._touch_email_marker()
            print(f"üìß Email c·∫£nh b√°o ƒë√£ g·ª≠i k√®m ·∫£nh: {image_path}")

        except Exception as e:
            print(f"[Email] L·ªói g·ª≠i email: {e}")

    @staticmethod
    def log_intrusion(name: str = "Unknown"):
        """Ghi log x√¢m nh·∫≠p v√†o file intrusion.log."""
        logline = f"[{datetime.now().isoformat()}] Detected: {name}\n"
        Path("logs").mkdir(exist_ok=True)
        with open("logs/intrusion.log", "a", encoding="utf-8") as f:
            f.write(logline)
        print(logline.strip())

    @staticmethod
    def save_intruder_image(frame, bounding_box) -> str:
        """L∆∞u ·∫£nh c·ªßa intruder (c·∫Øt t·ª´ bounding box)."""
        top, right, bottom, left = bounding_box
        margin = 20
        h, w = frame.shape[:2]
        t = max(0, top - margin)
        l = max(0, left - margin)
        b = min(h, bottom + margin)
        r = min(w, right + margin)
        face_image = frame[t:b, l:r]

        Path("intruder").mkdir(exist_ok=True)
        filename = Path("intruder") / f"{datetime.now().strftime('%Y%m%d_%H%M%S_%f')}.jpg"
        cv2.imwrite(str(filename), face_image)
        print(f"[Saved] ·∫¢nh Unknown: {filename}")
        return str(filename)

    @classmethod
    def alert_intruder(cls, frame, bounding_box, name: str = "Unknown"):
        """Quy tr√¨nh c·∫£nh b√°o intruder: l∆∞u ·∫£nh, ghi log, g·ª≠i email."""
        img_path = cls.save_intruder_image(frame, bounding_box)
        cls.log_intrusion(name)
        cls.send_alert_email(img_path)
        return img_path
